{"version":3,"sources":["connections.js"],"names":["variables","JSON","parse","process","env","VCAP_SERVICES","db_1","DB_1","db_2","DB_2","console","log","mongoose","require","opts","useNewUrlParser","useUnifiedTopology","promisify","setTimeoutPromise","setTimeout","connectToDatabase","db_url","connect","connection","on","error","message","exit","fault_inbox_db","fault_inbox_conn","module","exports","issue_tracker_conn","sites_conn"],"mappings":";;AAAA,IAAIA,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,OAAO,CAACC,GAAR,CAAYC,aAAZ,IAA6B,IAAxC,CAAhB;AACA,IAAIC,IAAI,GAAGH,OAAO,CAACC,GAAR,CAAYG,IAAvB;AACA,IAAIC,IAAI,GAAGL,OAAO,CAACC,GAAR,CAAYK,IAAvB;AACAC,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBX,SAAzB;;AACA,IAAIY,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB,C,CACA;;;AACA,IAAIC,IAAI,GAAG;AAACC,EAAAA,eAAe,EAAE,IAAlB;AAAwBC,EAAAA,kBAAkB,EAAE;AAA5C,CAAX,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;eACsBH,OAAO,CAAC,MAAD,C;IAArBI,S,YAAAA,S;;AACR,IAAMC,iBAAiB,GAAGD,SAAS,CAACE,UAAD,CAAnC;;AAEA,SAAeC,iBAAf,CAAiCC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAEUT,QAAQ,CAACU,OAAT,CAAiBD,MAAjB,EAAyB;AAC7BN,YAAAA,eAAe,EAAE,IADY;AAE7BC,YAAAA,kBAAkB,EAAE;AAFS,WAAzB,CAFV;;AAAA;AAOIN,UAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+BU,MAA3C,EAPJ,CASI;;AACAT,UAAAA,QAAQ,CAACW,UAAT,CAAoBC,EAApB,CAAuB,cAAvB,EAAuC;AAAA;AAAA;AAAA;AAAA;AACrCd,oBAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AADqC;AAAA;AAAA,oDAI7BO,iBAAiB,CAAC,KAAD,CAJY;;AAAA;AAAA;AAAA,oDAM7BN,QAAQ,CAACU,OAAT,CAAiBD,MAAjB,EAAyB;AAC7BN,sBAAAA,eAAe,EAAE,IADY;AAE7BC,sBAAAA,kBAAkB,EAAE;AAFS,qBAAzB,CAN6B;;AAAA;AAWnCN,oBAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCU,MAA7C;AAXmC;AAAA;;AAAA;AAAA;AAAA;AAcnCX,oBAAAA,OAAO,CAACe,KAAR,CAAc,2BAA2BJ,MAA3B,GAAoC,GAAlD,EAAuD,YAAMK,OAA7D;AACAvB,oBAAAA,OAAO,CAACwB,IAAR,CAAa,CAAb,EAfmC,CAelB;;AAfkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAvC,EAVJ,CA6BI;;AACAf,UAAAA,QAAQ,CAACW,UAAT,CAAoBC,EAApB,CAAuB,aAAvB,EAAsC,YAAM;AAC1Cd,YAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACD,WAFD;AA9BJ;AAAA;;AAAA;AAAA;AAAA;AAkCID,UAAAA,OAAO,CAACe,KAAR,CAAc,yBAAyBJ,MAAzB,GAAkC,GAAhD,EAAqD,aAAMK,OAA3D;AACAvB,UAAAA,OAAO,CAACwB,IAAR,CAAa,CAAb,EAnCJ,CAmCqB;;AAnCrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuCAP,iBAAiB,CAACd,IAAD,CAAjB;AACAc,iBAAiB,CAACZ,IAAD,CAAjB,C,CACA;AAEA;;AACA,IAAIoB,cAAc,GAAG,yBAArB;AACA,IAAIC,gBAAgB,GAAG,EAAvB,C,CAA2B;;AAE3BC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,kBAAkB,EAAlBA,kBADe;AAEfC,EAAAA,UAAU,EAAVA,UAFe;AAGfJ,EAAAA,gBAAgB,EAAhBA;AAHe,CAAjB","sourcesContent":["var variables = JSON.parse(process.env.VCAP_SERVICES || '{}')\r\nvar db_1 = process.env.DB_1;\r\nvar db_2 = process.env.DB_2;\r\nconsole.log('variables', variables);\r\nvar mongoose = require('mongoose');\r\n// var opts = {uri_decode_auth: true};\r\nvar opts = {useNewUrlParser: true, useUnifiedTopology: true};\r\n\r\n// Issue Tracker DB\r\n// var issue_tracker_conn = mongoose.createConnection(db_1, opts, function(\r\n//   err,\r\n//   response\r\n// ) {\r\n//   if (err) console.log('Fail to connect to ' + db_1);\r\n//   else console.log('Successfully connected to ' + db_1);\r\n// });\r\n\r\n// // Stations Info DB\r\n// var sites_conn = mongoose.createConnection(db_2, opts, function(err, response) {\r\n//   if (err) console.log('Fail to connect to ' + db_2);\r\n//   else console.log('Successfully connected to ' + db_2);\r\n// });\r\n\r\n/////////////////////////////////////////////////////////\r\n//////including more db reconnection error handling update\r\n/////////////////////////////////////////////////////////\r\n//const mongoose = require('mongoose');\r\nconst { promisify } = require('util');\r\nconst setTimeoutPromise = promisify(setTimeout);\r\n\r\nasync function connectToDatabase(db_url) {\r\n  try {\r\n    await mongoose.connect(db_url, {\r\n      useNewUrlParser: true,\r\n      useUnifiedTopology: true,     \r\n    });\r\n\r\n    console.log('Successfully connected to ' + db_url);\r\n\r\n    // Listen for disconnection event\r\n    mongoose.connection.on('disconnected', async () => {\r\n      console.log('Lost connection to MongoDB');\r\n\r\n      try {\r\n        await setTimeoutPromise(60000); // wait for 1 minute before attempting to reconnect\r\n\r\n        await mongoose.connect(db_url, {\r\n          useNewUrlParser: true,\r\n          useUnifiedTopology: true,         \r\n        });\r\n\r\n        console.log('Successfully reconnected to ' + db_url);\r\n        \r\n      } catch (error) {\r\n        console.error('Error reconnecting to ' + db_url + ':', error.message);\r\n        process.exit(1); // Exit the process with a non-zero exit code to restart the application on failed reconnection\r\n      }\r\n    });\r\n\r\n    // Listen for reconnected event and log message\r\n    mongoose.connection.on('reconnected', () => {\r\n      console.log('Successfully reconnected to MongoDB');\r\n    });\r\n  } catch (error) {\r\n    console.error('Error connecting to ' + db_url + ':', error.message);\r\n    process.exit(1); // Exit the process with a non-zero exit code to restart the application\r\n  }\r\n}\r\n\r\nconnectToDatabase(db_1);\r\nconnectToDatabase(db_2);\r\n///////////////////////////////////////////////////////\r\n\r\n// Fault Inbox DB\r\nvar fault_inbox_db = '% DB string goes here %';\r\nvar fault_inbox_conn = {}; // Your Fault Inbox DB connction code goes her;\r\n\r\nmodule.exports = {\r\n  issue_tracker_conn,\r\n  sites_conn,\r\n  fault_inbox_conn\r\n};\r\n"],"file":"connections.dev.js"}