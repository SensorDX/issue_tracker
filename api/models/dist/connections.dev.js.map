{"version":3,"sources":["connections.js"],"names":["variables","JSON","parse","process","env","VCAP_SERVICES","db_1","DB_1","db_2","DB_2","mongoose","require","opts","useNewUrlParser","useUnifiedTopology","issue_tracker_conn","createConnection","err","response","console","log","on","reconnect","sites_conn","fault_inbox_db","fault_inbox_conn","conn","dbUrl","attemptNum","setTimeout","exit","module","exports"],"mappings":";;AAAA,IAAIA,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,OAAO,CAACC,GAAR,CAAYC,aAAZ,IAA6B,IAAxC,CAAhB;AACA,IAAIC,IAAI,GAAGH,OAAO,CAACC,GAAR,CAAYG,IAAvB;AACA,IAAIC,IAAI,GAAGL,OAAO,CAACC,GAAR,CAAYK,IAAvB;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,IAAIC,IAAI,GAAG;AAACC,EAAAA,eAAe,EAAE,IAAlB;AAAwBC,EAAAA,kBAAkB,EAAE;AAA5C,CAAX,C,CAEA;;AACA,IAAIC,kBAAkB,GAAGL,QAAQ,CAACM,gBAAT,CAA0BV,IAA1B,EAAgCM,IAAhC,EAAsC,UAC7DK,GAD6D,EAE7DC,QAF6D,EAG7D;AACA,MAAID,GAAJ,EAAS;AACPE,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBd,IAApC;AACD,GAFD,MAGK;AACHa,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+Bd,IAA3C,EADG,CAGH;;AACAS,IAAAA,kBAAkB,CAACM,EAAnB,CAAsB,cAAtB,EAAsC,YAAW;AAC/CF,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACAE,MAAAA,SAAS,CAACP,kBAAD,EAAqBT,IAArB,EAA2BM,IAA3B,CAAT;AACD,KAHD;AAID;AACF,CAhBwB,CAAzB,C,CAkBA;;AACA,IAAIW,UAAU,GAAGb,QAAQ,CAACM,gBAAT,CAA0BR,IAA1B,EAAgCI,IAAhC,EAAsC,UAASK,GAAT,EAAcC,QAAd,EAAwB;AAC7E,MAAID,GAAJ,EAAS;AACPE,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBZ,IAApC;AACD,GAFD,MAGK;AACHW,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+BZ,IAA3C,EADG,CAGH;;AACAe,IAAAA,UAAU,CAACF,EAAX,CAAc,cAAd,EAA8B,YAAW;AACvCF,MAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACAE,MAAAA,SAAS,CAACC,UAAD,EAAaf,IAAb,EAAmBI,IAAnB,CAAT;AACD,KAHD;AAID;AACF,CAbgB,CAAjB,C,CAeA;;AACA,IAAIY,cAAc,GAAG,yBAArB;AACA,IAAIC,gBAAgB,GAAG,EAAvB,C,CAA2B;;AAE3B,SAASH,SAAT,CAAmBI,IAAnB,EAAyBC,KAAzB,EAAgCf,IAAhC,EAAsD;AAAA,MAAhBgB,UAAgB,uEAAH,CAAG;;AACpD,MAAIA,UAAU,GAAG,EAAjB,EAAqB;AACnBT,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BO,KAA5B,GAAoC,oBAAhD;AACAE,IAAAA,UAAU,CAAC,YAAW;AACpB1B,MAAAA,OAAO,CAAC2B,IAAR,CAAa,CAAb,EADoB,CACH;AAClB,KAFS,EAEP,MAFO,CAAV,CAFmB,CAIP;;AACZ;AACD;;AAEDX,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgCO,KAAhC,GAAwC,aAAxC,GAAwDC,UAApE,EAToD,CAUpD;;AACAC,EAAAA,UAAU,CAAC,YAAW;AACnBnB,IAAAA,QAAQ,CAACM,gBAAT,CAA0BW,KAA1B,EAAiCf,IAAjC,EAAuC,UAASK,GAAT,EAAc;AACpD,UAAIA,GAAJ,EAAS;AACPE,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBQ,UAAxB,GAAqC,MAArC,GAA8CD,KAA9C,GAAsD,SAAlE;AACAL,QAAAA,SAAS,CAACI,IAAD,EAAOC,KAAP,EAAcf,IAAd,EAAoBgB,UAAU,GAAG,CAAjC,CAAT;AACD,OAHD,MAIK;AACHT,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBO,KAApB,GAA4B,eAAxC;AACD;AACF,KARA;AASF,GAVS,EAUP,KAVO,CAAV,CAXoD,CAqBzC;AACZ;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,kBAAkB,EAAlBA,kBADe;AAEfQ,EAAAA,UAAU,EAAVA,UAFe;AAGfE,EAAAA,gBAAgB,EAAhBA;AAHe,CAAjB","sourcesContent":["var variables = JSON.parse(process.env.VCAP_SERVICES || '{}')\r\nvar db_1 = process.env.DB_1;\r\nvar db_2 = process.env.DB_2;\r\nvar mongoose = require('mongoose');\r\nvar opts = {useNewUrlParser: true, useUnifiedTopology: true};\r\n\r\n// Issue Tracker DB\r\nvar issue_tracker_conn = mongoose.createConnection(db_1, opts, function(\r\n  err,\r\n  response\r\n) {\r\n  if (err) {\r\n    console.log('Fail to connect to ' + db_1);\r\n  }\r\n  else {\r\n    console.log('Successfully connected to ' + db_1);\r\n\r\n    // Handle database disconnection\r\n    issue_tracker_conn.on('disconnected', function() {\r\n      console.log('Lost connection to Issue Tracker DB');\r\n      reconnect(issue_tracker_conn, db_1, opts);\r\n    });\r\n  }\r\n});\r\n\r\n// Stations Info DB\r\nvar sites_conn = mongoose.createConnection(db_2, opts, function(err, response) {\r\n  if (err) {\r\n    console.log('Fail to connect to ' + db_2);\r\n  }\r\n  else {\r\n    console.log('Successfully connected to ' + db_2);\r\n\r\n    // Handle database disconnection\r\n    sites_conn.on('disconnected', function() {\r\n      console.log('Lost connection to Stations Info DB');\r\n      reconnect(sites_conn, db_2, opts);\r\n    });\r\n  }\r\n});\r\n\r\n// Fault Inbox DB\r\nvar fault_inbox_db = '% DB string goes here %';\r\nvar fault_inbox_conn = {}; // Your Fault Inbox DB connction code goes here;\r\n\r\nfunction reconnect(conn, dbUrl, opts, attemptNum = 1) {\r\n  if (attemptNum > 10) {\r\n    console.log('Failed to reconnect to ' + dbUrl + ' after 10 attempts');\r\n    setTimeout(function() {\r\n      process.exit(1); // return non-zero to restart application\r\n    }, 240000); // wait for 4 minutes before returning non-zero exit code\r\n    return;\r\n  }\r\n  \r\n  console.log('Attempting to reconnect to ' + dbUrl + ', attempt #' + attemptNum);\r\n  //mongoose.disconnect(); //conn.open() throws an error\r\n  setTimeout(function() {\r\n     mongoose.createConnection(dbUrl, opts, function(err) {\r\n      if (err) {\r\n        console.log('Reconnect attempt #' + attemptNum + ' to ' + dbUrl + ' failed');\r\n        reconnect(conn, dbUrl, opts, attemptNum + 1);\r\n      }\r\n      else {\r\n        console.log('Reconnected to ' + dbUrl + ' successfully');\r\n      }\r\n    });\r\n  }, 10000); // wait 10 seconds before each reconnection attempt\r\n}\r\n\r\nmodule.exports = {\r\n  issue_tracker_conn,\r\n  sites_conn,\r\n  fault_inbox_conn\r\n};\r\n\r\n\r\n"],"file":"connections.dev.js"}