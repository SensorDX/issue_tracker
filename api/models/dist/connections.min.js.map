{"version":3,"sources":["connections.js"],"names":["variables","JSON","parse","process","env","VCAP_SERVICES","db_1","DB_1","db_2","useUnifiedTopology","issue_tracker_conn","mongoose","createConnection","opts","err","useNewUrlParser","console","log","on","sites_conn","response","reconnect","fault_inbox_db","conn","fault_inbox_conn","attemptNum","dbUrl","arguments","length","undefined","setTimeout","exit"],"mappings":"aAAA,IAAIA,UAAYC,KAAKC,MAAMC,QAAQC,IAAIC,eAAiB,MACpDC,KAAOH,QAAQC,IAAIG,KADnBP,KAAAA,QAAYC,IAAKC,KACjBI,SAAOH,QAAYI,YACnBC,KAAOL,CAAAA,iBAAX,EAAAM,oBAAA,GAKIC,mBAAqBC,SAASC,iBAAiBN,KAAMO,KAAM,SAH/DC,EAAYC,GAEZD,EAMIE,QAAQC,IAAI,sBAAwBX,OAApCU,QAAQC,IAAI,6BAAZX,MAMAI,mBAAmBQ,GAAG,eAAgB,WAAtCR,QAAAA,IAAAA,uCACEM,UAAQC,mBAAIX,KAAAO,WAOdM,WAAaR,SAASC,iBAAiBJ,KAAMK,KAAM,SAAAC,EAAAM,GACjDN,EACFE,QAAQC,IAAI,sBAAwBT,OAGpCQ,QAAQC,IAAI,6BAA+BT,MAKzCa,WAASH,GAACC,eAAkBN,WAF9BG,QAAAC,IAAA,uCAIDI,UAAAF,WAAAX,KAAAK,WAOHS,eAAmBC,0BAAmCC,iBAAA,GACpD,SAAIC,UAAaF,EAAIG,EAAAb,GAAA,IAAAY,EAAA,EAAAE,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAA,EACnBX,GAAY,GAAZA,EAIA,OAHAc,QAAAA,IAAW,0BAAWJ,EAAA,2BACpBvB,WAAQ4B,WADA5B,QAAV4B,KAEY,IAAT,MAILf,QAAQC,IAAI,8BAAgCS,EAAQ,cAAgBD,GAEpEK,WAAW,WACRnB,SAASC,iBAAiBc,EAAOb,EAAM,SAASC,GAC3CA,GACFE,QAAQC,IAAI,sBAAwBQ,EAAa,OAASC,EAAQ,WAClEL,UAAUE,EAAMG,EAAOb,EAAMY,EAAa,IAI3CT,QAAAC,IAAA,kBAAAS,EAAA,oBAGN,KAGChB,OAAAA,QAAAA,CACAS,mBAAAA,mBACAK,WAAAA,WAHFA,iBAAAA","file":"connections.min.js","sourcesContent":["var variables = JSON.parse(process.env.VCAP_SERVICES || '{}')\r\nvar db_1 = process.env.DB_1;\r\nvar db_2 = process.env.DB_2;\r\nvar mongoose = require('mongoose');\r\nvar opts = {useNewUrlParser: true, useUnifiedTopology: true};\r\n\r\n// Issue Tracker DB\r\nvar issue_tracker_conn = mongoose.createConnection(db_1, opts, function(\r\n  err,\r\n  response\r\n) {\r\n  if (err) {\r\n    console.log('Fail to connect to ' + db_1);\r\n  }\r\n  else {\r\n    console.log('Successfully connected to ' + db_1);\r\n\r\n    // Handle database disconnection\r\n    issue_tracker_conn.on('disconnected', function() {\r\n      console.log('Lost connection to Issue Tracker DB');\r\n      reconnect(issue_tracker_conn, db_1, opts);\r\n    });\r\n  }\r\n});\r\n\r\n// Stations Info DB\r\nvar sites_conn = mongoose.createConnection(db_2, opts, function(err, response) {\r\n  if (err) {\r\n    console.log('Fail to connect to ' + db_2);\r\n  }\r\n  else {\r\n    console.log('Successfully connected to ' + db_2);\r\n\r\n    // Handle database disconnection\r\n    sites_conn.on('disconnected', function() {\r\n      console.log('Lost connection to Stations Info DB');\r\n      reconnect(sites_conn, db_2, opts);\r\n    });\r\n  }\r\n});\r\n\r\n// Fault Inbox DB\r\nvar fault_inbox_db = '% DB string goes here %';\r\nvar fault_inbox_conn = {}; // Your Fault Inbox DB connction code goes here;\r\n\r\nfunction reconnect(conn, dbUrl, opts, attemptNum = 1) {\r\n  if (attemptNum > 10) {\r\n    console.log('Failed to reconnect to ' + dbUrl + ' after 10 attempts');\r\n    setTimeout(function() {\r\n      process.exit(1); // return non-zero to restart application\r\n    }, 240000); // wait for 4 minutes before returning non-zero exit code\r\n    return;\r\n  }\r\n  \r\n  console.log('Attempting to reconnect to ' + dbUrl + ', attempt #' + attemptNum);\r\n  //mongoose.disconnect(); //conn.open() throws an error\r\n  setTimeout(function() {\r\n     mongoose.createConnection(dbUrl, opts, function(err) {\r\n      if (err) {\r\n        console.log('Reconnect attempt #' + attemptNum + ' to ' + dbUrl + ' failed');\r\n        reconnect(conn, dbUrl, opts, attemptNum + 1);\r\n      }\r\n      else {\r\n        console.log('Reconnected to ' + dbUrl + ' successfully');\r\n      }\r\n    });\r\n  }, 10000); // wait 10 seconds before each reconnection attempt\r\n}\r\n\r\nmodule.exports = {\r\n  issue_tracker_conn,\r\n  sites_conn,\r\n  fault_inbox_conn\r\n};\r\n\r\n\r\n"]}