{"version":3,"sources":["connections.js"],"names":["variables","JSON","parse","process","env","VCAP_SERVICES","db_1","DB_1","console","log","db_2","DB_2","opts","useNewUrlParser","useUnifiedTopology","require","promisify","setTimeoutPromise","setTimeout","connectToDatabase","db_url","regeneratorRuntime","async","_context2","prev","next","awrap","connect","mongoose","connection","on","_context","t0","error","message","exit","stop","fault_inbox_db","fault_inbox_conn","issue_tracker_conn","sites_conn"],"mappings":"aAAA,IAAIA,UAAYC,KAAKC,MAAMC,QAAQC,IAAIC,eAAiB,MACpDC,KAAOH,QAAQC,IAAIG,KADnBP,KAAAA,QAAYC,IAAKC,KACrBM,QAAQC,IAAGN,YAAYI,WACvB,IAAIG,SAAOP,QAAYQ,YAInBC,KAAO,CAACC,iBAAiB,EAAMC,oBAAoB,YAkBvDC,QAAA,QAAAC,mBAAAA,UACAC,kBAAAD,UAAAE,YAKA,SAAeC,kBAAkBC,GAAjC,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAHQV,SAKWW,QALXX,EAK2B,CAC7BH,iBAAiB,EALjBI,oBAAoBD,KAE1B,KAAA,EAAAR,QAAAC,IAAA,6BAAAW,GAAAQ,SAAAC,WAAAC,GAAA,eAAA,WAAA,OAAAT,mBAAAC,MAAA,SAAAS,GAAA,OAAA,OAAAA,EAAAP,KAAAO,EAAAN,MAAA,KAAA,EAAA,OAAAjB,QAAAC,IAAA,8BAAAsB,EAAAP,KAAA,EAAAO,EAAAN,KAAA,EAAAJ,mBAAAK,MAGMb,kBAAiB,MAHvB,KAAA,EAAA,OAAAkB,EAAAN,KAAA,EAAAJ,mBAAAK,MAAAE,SAAAD,QAAAP,EAAA,CAiBUP,iBAAiB,EAjB3BC,oBAAA,KAAA,KAAA,EAUIc,QAAAA,IAASC,+BAA8BT,GAV3CW,EAAAN,KAAA,GAAA,MAAA,KAAA,EAAAM,EAAAP,KAAA,EAAAO,EAAAC,GAAAD,EAAA,MAAA,GAU2CvB,QAAAyB,MAAA,yBAAAb,EAAA,IAAAW,EAAAC,GAAAE,SAAA/B,QAAAgC,KAAA,GAV3C,KAAA,GAAA,IAAA,MAAA,OAAAJ,EAAAK,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OA8BIR,SAASC,WAAWC,GAAG,cAAe,WApBCtB,QAAAC,IAAA,yCAV3Cc,EAAAE,KAAA,GAAA,MAAA,KAAA,EAAAF,EAAAC,KAAA,EAAAD,EAAAS,GAAAT,EAAA,MAAA,GAiBUV,QAAAA,MAAAA,uBAD6BO,EAAA,IAAAG,EAAAS,GAAAE,SAE7BpB,QAAAA,KAAAA,GAlBV,KAAA,GAAA,IAAA,MAAA,OAAAS,EAAAa,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,KAqBQ5B,kBAAAA,MAXmCW,kBAAAT,MAAA,IAAA2B,eAAA,0BAAAC,iBAAA,GAenCnC,OAAAA,QAAAA,CAuBNoC,mBAAAA,mBAtCyCC,WAAAA,WAAAF,iBAAAA","file":"connections.min.js","sourcesContent":["var variables = JSON.parse(process.env.VCAP_SERVICES || '{}')\r\nvar db_1 = process.env.DB_1;\r\nvar db_2 = process.env.DB_2;\r\nconsole.log('variables', variables);\r\nvar mongoose = require('mongoose');\r\n// var opts = {uri_decode_auth: true};\r\nvar opts = {useNewUrlParser: true, useUnifiedTopology: true};\r\n\r\n// Issue Tracker DB\r\n// var issue_tracker_conn = mongoose.createConnection(db_1, opts, function(\r\n//   err,\r\n//   response\r\n// ) {\r\n//   if (err) console.log('Fail to connect to ' + db_1);\r\n//   else console.log('Successfully connected to ' + db_1);\r\n// });\r\n\r\n// // Stations Info DB\r\n// var sites_conn = mongoose.createConnection(db_2, opts, function(err, response) {\r\n//   if (err) console.log('Fail to connect to ' + db_2);\r\n//   else console.log('Successfully connected to ' + db_2);\r\n// });\r\n\r\n/////////////////////////////////////////////////////////\r\n//////including more db reconnection error handling update\r\n/////////////////////////////////////////////////////////\r\n//const mongoose = require('mongoose');\r\nconst { promisify } = require('util');\r\nconst setTimeoutPromise = promisify(setTimeout);\r\n\r\nasync function connectToDatabase(db_url) {\r\n  try {\r\n    await mongoose.connect(db_url, {\r\n      useNewUrlParser: true,\r\n      useUnifiedTopology: true,     \r\n    });\r\n\r\n    console.log('Successfully connected to ' + db_url);\r\n\r\n    // Listen for disconnection event\r\n    mongoose.connection.on('disconnected', async () => {\r\n      console.log('Lost connection to MongoDB');\r\n\r\n      try {\r\n        await setTimeoutPromise(60000); // wait for 1 minute before attempting to reconnect\r\n\r\n        await mongoose.connect(db_url, {\r\n          useNewUrlParser: true,\r\n          useUnifiedTopology: true,         \r\n        });\r\n\r\n        console.log('Successfully reconnected to ' + db_url);\r\n        \r\n      } catch (error) {\r\n        console.error('Error reconnecting to ' + db_url + ':', error.message);\r\n        process.exit(1); // Exit the process with a non-zero exit code to restart the application on failed reconnection\r\n      }\r\n    });\r\n\r\n    // Listen for reconnected event and log message\r\n    mongoose.connection.on('reconnected', () => {\r\n      console.log('Successfully reconnected to MongoDB');\r\n    });\r\n  } catch (error) {\r\n    console.error('Error connecting to ' + db_url + ':', error.message);\r\n    process.exit(1); // Exit the process with a non-zero exit code to restart the application\r\n  }\r\n}\r\n\r\nconnectToDatabase(db_1);\r\nconnectToDatabase(db_2);\r\n///////////////////////////////////////////////////////\r\n\r\n// Fault Inbox DB\r\nvar fault_inbox_db = '% DB string goes here %';\r\nvar fault_inbox_conn = {}; // Your Fault Inbox DB connction code goes her;\r\n\r\nmodule.exports = {\r\n  issue_tracker_conn,\r\n  sites_conn,\r\n  fault_inbox_conn\r\n};\r\n"]}